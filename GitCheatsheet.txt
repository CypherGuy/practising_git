Git Cheatsheet

Commands related to a remote repository:
    git clone git@github.com:USER-NAME/REPOSITORY-NAME.git
    git push or git push origin main (Both accomplish the same goal in this context)

Commands related to the workflow:
    git add .
    git commit -m "A message describing what you have done to make this snapshot different"

Commands related to checking status or log history
    git show
    git status
    git log
    git shortlog -> Shows SL for commit groups commited by user
    git log --oneline -> Prints out just the subject line
The basic Git syntax is program | action | destination.


Commands related to forking, making changes and merging
    git checkout -b <branch> -> Make a new local branch and change to it in your IDE
    git push origin <branch> -> Push this local branch to Github
    git branch -> View branch
    git checkout <branch> -> Move to another branch in your IDE

    Add, Commit and Push as normal
    Ensure you're in your new branch before merging

    git checkout main
    git merge <branch> -> Merge branches

    At this point you should notice your code change
    git push origin main

    Delete branch once done

    branch -d <Branch> -> Delete locally
    git push origin --delete <Branch> -> Deelte on Github






For example,

git add . is read as git | add | ., where the period represents everything in the current directory;
git commit -m "message" is read as git | commit -m | "message"; and
git status is read as git | status | (no destination).

--------- COMMIT TIPS ---------

- Using `git commit`

1. Separate subject from body with a blank line

For example:

    "Derezz the master control program

    MCP turned out to be evil and had become intent on world domination.
    This commit throws Tron's disc into MCP (causing its deresolution)
    and turns it back into a chess game."

2. Limit the subject line to 50 characters

50 is soft limit, 72 is "hard" limit

3. Capitalize the subject line

Basic SPaG

4. Do not end the subject line with a period

This tip is used to conserve space

5. Use the imperative mood in the subject line

    - As if you're giving a demand

    For example:

        Refactor subsystem X for readability
        Update getting started documentation
        Remove deprecated methods
        Release version 1.0.0

A properly formed Git commit subject line should always be able to complete the following sentence:

If applied, this commit will ...


6. Wrap the body at 72 characters

7. Use the body to explain what and why vs. how


